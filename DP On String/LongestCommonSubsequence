//memoization
int f(int i1,int i2, string s1, string s2, vector<vector<int>> &dp){
    if(i1<0 || i2<0) return 0;
    
    if(dp[i1][i2]!=-1) return dp[i1][i2];
    if(s1[i1]==s2[i2]) return f(i1-1,i2-1,s1,s2,dp)+1;
    return dp[i1][i2] = max(f(i1-1,i2,s1,s2,dp) , f(i1,i2-1,s1,s2,dp));
}

int lcs(string s1, string s2)
{
	int n = s1.size() , m = s2.size();
    vector<vector<int>> dp(n, vector<int>(m,-1));
    return f(n-1,m-1,s1,s2,dp);
}

//TC O(n*m)
//Sc O(n*m) + O(n)


//tabulation
int longestCommonSubsequence(string s1, string s2) {
        int n = s1.size() , m = s2.size();
        vector<vector<int>> dp(n+1, vector<int>(m+1, -1)); //shifting of indices
        for(int j=0;j<=m;j++) dp[0][j]=0;
        for(int i=0;i<=n;i++) dp[i][0]=0;
        
        for(int i1=1;i1<=n;i1++){
            for(int i2=1;i2<=m;i2++){
                if(s1[i1-1]==s2[i2-1]) dp[i1][i2] = dp[i1-1][i2-1]+1;
                else dp[i1][i2] = max(dp[i1-1][i2] , dp[i1][i2-1]);
            }
        }
        return dp[n][m];
    }
//TC O(n*m)
//Sc O(n*m) 

//space optimization
 int longestCommonSubsequence(string s1, string s2) {
        int n = s1.size() , m = s2.size();
        //vector<vector<int>> dp(n+1, vector<int>(m+1, -1)); //shifting of indices
        vector<int> prev(m+1,0) , curr(m+1,0);
        
        for(int i1=1;i1<=n;i1++){
            for(int i2=1;i2<=m;i2++){
                if(s1[i1-1]==s2[i2-1]) curr[i2] = prev[i2-1]+1;
                else curr[i2] = max(prev[i2] , curr[i2-1]);
            }
            prev=curr;
        }
        return curr[m];
    }
//TC O(n*m)
//Sc O(m) 

    
